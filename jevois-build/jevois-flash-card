#!/bin/bash
# USAGE: jevois-flash-card [-y] [device]
# If -y is specified, assume all defaults are ok
# if 'device' does not start with /dev/ then it is assumed to be the stem of a disk image file name to create.
# We will create <device>.img, <device>.sha256 and <device>.zip
#
# This script needs to be run with root permissions (e.g., sudo jevois-flash-card)

####################################################################################################
# Basic checks for required files and directories:
####################################################################################################

echo "#################### JeVois microSD card builder. Copyright (C) 2017-2024 by Laurent Itti, iLab and USC."
echo

if [ ! -d /var/lib/jevois-microsd ]; then
    echo "Directory /var/lib/jevois-microsd/ is missing -- run [./rebuild-platform.sh] in jevois -- ABORT"
    exit 1
fi

if [ ! -d /var/lib/jevois-build ]; then
    echo "Directory /var/lib/jevois-build/ is missing -- run [./rebuild-platform.sh] in jevois -- ABORT"
    exit 3
fi

if [ ! -d /var/lib/jevois-build/usr ]; then
    echo "Directory /var/lib/jevois-build/usr is missing -- run [./rebuild-platform.sh] in jevois -- ABORT"
    exit 5
fi

if [ ! -d /var/lib/jevois-microsd/modules ]; then
    echo "Directory /var/lib/jevois-microsd/modules/ is missing -- run [./rebuild-platform.sh --staging] in jevoisbase -- ABORT"
    exit 2
fi

if [ ! -d /var/lib/jevois-build/boot ]; then
    echo "Directory /var/lib/jevois-build/boot is missing -- run [./jevois-build.sh] in jevois-sdk -- ABORT"
    exit 4
fi

####################################################################################################
# Secondary check for necessary boot files:
####################################################################################################

cd /var/lib/jevois-build
failed=0
for f in boot0_sdcard.fex microsd-readme.txt rootfs.ext4 script.bin u-boot.fex uEnv.txt uImage; do
    if [ ! -f "boot/${f}" ]; then echo "Missing file $f in /var/lib/jevois-build/boot"; failed=1; fi
done
if [ "X${failed}" != "X0" ]; then exit 6; fi

####################################################################################################
# Handle -y option:
####################################################################################################
usedef=0
card=$1
if [ "x$card" = "x-y" ]; then usedef=1; card=$2; fi

####################################################################################################
# Check/get card device:
####################################################################################################
if [ "x$card" = "x" ]; then
    read -p "Enter device name for microSD card: ";
    if [ "X$REPLY" != "X" ]; then card=$REPLY; fi
else
    if [ $usedef -ne 1 ]; then
	read -p "Enter device name for microSD card [default $1]: "
	if [ "X$REPLY" != "X" ]; then card=$REPLY; fi
    fi
fi

if [ "x$card" = "x" ]; then echo "Cannot write to empty card device -- ABORT"; exit 7; fi

if [[ "$card" =~ ^/dev/.* ]]; then
    if [ ! -b "$card" ]; then echo "Specified card device [$card] not a block device -- ABORT"; exit 8; fi
else
    echo "Initializing microSD image ${card}.img ..."
    # Remember original name, create and setup image file, then replace 'card' by loop device:
    cardname=${card}
    dd if=/dev/zero of=${cardname}.img bs=1M count=7500
    card="$(losetup --show -f ${card}.img)"
	if [[ -z ${card} ]]; then
        losetup -D
        card="$(losetup --show -f ${card}.img)"
	    if [[ -z ${card} ]]; then echo "Unable to find free loop device!"; exit 23; fi
    fi
	partprobe "${card}"
fi

# Block device may exist if card reader is present but no card is inserted; also check for card:
dd if="$card" of=/dev/null count=1 status=none
if [ $? -ne 0 ]; then "Device [$card] not readable -- insert microSD card and run as sudo -- ABORT"; exit 9; fi

echo
echo "=============================== Contents of $card:"
echo abort | sfdisk --no-reread --force ${card} | grep -v Checking | grep -v Leaving.
echo "=================================================="
echo
echo

sectors=`echo abort | sfdisk --no-reread --force ${card} | grep -v '=' | grep bytes | grep sectors | awk '{ print $7 }'`
mbytes=`expr ${sectors} / 2048`

# NOTE: here we reject automatic formatting of any disk larger than 64GB to avoid accidental destruction of real hard
# drives. You may need to adjust the line below if attempting to use a very large microSD card:
maxmbytes=65700

if [[ ${mbytes} -gt ${maxmbytes} ]]; then
    echo "$card is larger than 64GB. Please confirm that this you want to ERASE ALL DATA on $card."
    read -p "Type 'sure' to ERASE ALL DATA on $card: "
    if [ "X$REPLY" != "Xsure" ]; then echo "Operation aborted by user."; exit 12; fi
elif [ $usedef -ne 1 ]; then
    read -p "Ok to ERASE ALL DATA on $card? [y/N] "
    if [ "X$REPLY" != "Xy" ]; then echo "Operation aborted by user."; exit 10; fi
fi

# Make sure the card was not automatically mounted:
umount ${card}* > /dev/null 2>&1
sleep 3

####################################################################################################
# Nuke any old partition table and install bootloaders and new partitions:
####################################################################################################
echo
echo "#################### Erasing old partitions and partition table..."
dd if=/dev/zero of=${card} bs=1M count=100
if [ $? -ne 0 ]; then echo "Cannot erase ${card} - make sure you run jevois-flash-card as sudo -- ABORT"; exit 11; fi
sync

echo "#################### Flashing boot0 loader..."
dd if=boot/boot0_sdcard.fex of=${card} bs=1k seek=8
sync

echo "#################### Flashing u-boot loader..."
dd if=boot/u-boot.fex of=${card} bs=1k seek=19096
sync

# Units for sfdisk are sectors; u-boot starts at 38192 and is about 510k, so start partitions after sector 39200.
# Here we first define desired partition sizes in MEGABYTES to make it simple:
# p1 is vfat and is boot partition
# p2 is ext4 and is root
# p3 is vfat and is JeVois data, fills entire card
p1siz=16
if [ $usedef -ne 1 ]; then
    read -p "Enter size in MB for boot partition [${p1siz}] "
    if [ "X$REPLY" != "X" ]; then p1siz=$REPLY; fi
fi

p2siz=1024
if [ $usedef -ne 1 ]; then
    read -p "Enter size in MB for Linux system partition [${p2siz}] "
    if [ "X$REPLY" != "X" ]; then p2siz=$REPLY; fi
fi

echo "#################### Creating partitions on ${card} ..."

# Compute all offsets and sizes in sectors of 512 bytes:
p1start=39936
p1sec=`expr ${p1siz} \* 2048`
p2start=`expr ${p1start} + ${p1sec}`
p2sec=`expr ${p2siz} \* 2048`
p3start=`expr ${p2start} + ${p2sec}`
echo ${p1start},${p1sec},c
echo ${p2start},${p2sec},L
echo ${p3start},,c

# Write new partition table:
cat <<EOT | sfdisk ${card}
${p1start},${p1sec},c
${p2start},${p2sec},L
${p3start},,c
EOT
sync
partprobe "${card}"
sleep 2

####################################################################################################
# Create filesystems:
####################################################################################################

p=""
if [[ -b "${card}p1" ]]; then p="p"; fi

echo "#################### Creating filesystems on ${card} ..."
mkfs.vfat -n BOOT ${card}${p}1
sync

# For future reference, because we run kernel 3.4 on the platform, we need to make sure we do not here create the fs
# with unsupported features. These features are ok, disable any extra ones:
#
# on platform: [sudo tune2fs -l /dev/sdb2] returns:
# Filesystem features: has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super
# large_file huge_file uninit_bg dir_nlink extra_isize

if [ `cat /etc/issue | grep 15 | wc -l` -eq 1 ]; then
    mkfs.ext4 -L LINUX ${card}${p}2 # no extra options needed on ubuntu 15.x
elif [ `cat /etc/issue | grep 16.04 | wc -l` -eq 1 ]; then
    mkfs.ext4 -L LINUX -O ^64bit,uninit_bg ${card}${p}2 # need to disable some new features on 16.x
else
    mkfs.ext4 -L LINUX -O ^64bit,uninit_bg,^metadata_csum ${card}${p}2 # need to disable some new features on 17.x
fi

sync
mkfs.vfat -n JEVOIS ${card}${p}3
sync
sleep 2

####################################################################################################
# Populate partitions:
####################################################################################################

mkdir sdcard
mount ${card}${p}2 sdcard
mkdir sdcard/boot sdcard/jevois
mount ${card}${p}1 sdcard/boot
mount ${card}${p}3 sdcard/jevois
mkdir sdcard/jevois/data sdcard/jevois/lib sdcard/jevois/modules sdcard/jevois/packages sdcard/jevois/share

echo "#################### Populating boot partition ${card}${p}1 from /var/lib/jevois-build/boot/ ..."
cp boot/uImage boot/script.bin boot/uEnv.txt sdcard/boot/
cp boot/microsd-readme.txt sdcard/boot/README.txt

if [ $usedef -ne 1 ]; then
    read -p "Drop to login prompt instead of starting JeVois software automatically [y/N] "
    if [ "X$REPLY" = "Xy" ]; then touch sdcard/boot/login; fi

    read -p "Disable serial-over-USB port [y/N] "
    if [ "X$REPLY" = "Xy" ]; then touch sdcard/boot/nousbserial; fi
fi
sync

echo "#################### Populating root partition ${card}${p}2 from /var/lib/jevois-build/boot/rootfs.ext4 ..."

mkdir rootfs-jevois
mount -o loop boot/rootfs.ext4 rootfs-jevois
cp -ar rootfs-jevois/* sdcard/
sync
umount rootfs-jevois
/bin/rm -rf rootfs-jevois

# patch up the rootfs:
cat > sdcard/etc/fstab <<EOF
/dev/root	/		ext4	ro,flush,noatime,noauto	0	0
devpts		/dev/pts	devpts	defaults,gid=5,mode=620	0	0
tmpfs		/dev/shm	tmpfs	mode=0777	0	0
tmpfs		/tmp		tmpfs	mode=1777	0	0
tmpfs		/run		tmpfs	mode=0755,nosuid,nodev	0	0
sysfs		/sys		sysfs	defaults	0	0
debugfs         /sys/kernel/debug       debugfs  defaults  0 0
/dev/mmcblk0p1  /boot           vfat    ro,flush,noatime,umask=000 0 0
/dev/mmcblk0p3  /jevois         vfat    rw,flush,noatime,umask=000 0 0
EOF

cat > sdcard/etc/init.d/rcS <<EOF
#!/bin/sh
hostname jevois
MODULES_DIR=/lib/modules/3.4.39

if [ ! -f /boot/login ]; then /usr/bin/jevois.sh
else while true; do /sbin/getty -L ttyS0 115200 vt100; done; fi
EOF

echo "#################### Populating JeVois core in ${card}${p}2 from /var/lib/jevois-build/usr/ ..."
cp -ar usr sdcard/

# fixup opencv python if needed:
if [ -f sdcard/usr/lib/python3.6/site-packages/cv2/python-3.6/cv2.cpython-36m-x86_64-linux-gnu.so ]; then
    # There is a flaw in the buildroot building of opencv, where the library file name still shows up as compiled for
    # whatever the host architecture was, even though it has been correctly cross-compiled for the JeVois ARM
    # processor. Here we fix that and also move the library to the python site-packages:
    mv sdcard/usr/lib/python3.6/site-packages/cv2/python-3.6/cv2.cpython-36m-x86_64-linux-gnu.so sdcard/usr/lib/python3.6/site-packages/cv2/python-3.6/cv2.so
fi
    
# Do not activate a console on ttyS0 by default in inittab, we do it in rcS above if needed, or in jevois.sh:
sed -i '/ttyS0/d' sdcard/etc/inittab

echo "#################### Populating jevois partition ${card}${p}2 from /var/lib/jevois-microsd/ ..."

cp -ar /var/lib/jevois-microsd/* sdcard/jevois/

####################################################################################################
# Final fix:
####################################################################################################

echo "#################### Flushing caches and releasing card... This can take up to one hour..."

sync
umount sdcard/jevois
umount sdcard/boot
umount sdcard
sync

/bin/rm -rf sdcard

if [ "x${cardname}" != "x" ]; then
    losetup -d ${card}
    sha256sum ${cardname}.img > ${cardname}.sha256
    zip -9 ${cardname}.zip ${cardname}.img ${cardname}.sha256
    /bin/rm -f ${cardname}.img ${cardname}.sha256
    echo "#################### Image /var/lib/jevois-build/${cardname}.zip loaded with JeVois software."
    echo "#################### Flash ${cardname}.zip to physical microSD using Balena Etcher"
else
    echo "#################### microSD card is now loaded with JeVois software."
    echo "#################### microSD card is ready to be inserted into your JeVois smart camera."
fi
